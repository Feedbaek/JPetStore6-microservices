name: Deploy JPetStore6-microservices with prod environment

on:
  push:
    branches: [ 'convert-spring_boot' ]

jobs:
  build:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}


      - name: Docker Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:${{ github.sha }}


  deploy:
    name: Deploy to Server Instance using SSH
    needs: build
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest

            if [ "$(docker ps -aq -f name=${{ secrets.APPLICATION_NAME }})" ]; then
              echo "[ ${{ secrets.APPLICATION_NAME }} is running ]"
              docker stop ${{ secrets.APPLICATION_NAME }}
              docker rm ${{ secrets.APPLICATION_NAME }}
            else
              echo "[ ${{ secrets.APPLICATION_NAME }} is not running ]"
            fi
            
            echo "${{ secrets.ENV_LIST }}" | tr ';' '\n' > env.list

            docker run -e TZ=Asia/Seoul --env-file env.list -d --name ${{ secrets.APPLICATION_NAME }} \
              --add-host=myhost:host-gateway \
              -p ${{ secrets.APPLICATION_PORT }}:${{ secrets.APPLICATION_PORT }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest

            docker image prune -f